using System.Buffers;
using System.Buffers.Text;
using System.Collections.Frozen;
using System.Security.Cryptography;
using System.Text;
using static System.Net.Mime.MediaTypeNames;

namespace GLV.Shared.Server.API;

public static class StringExtensions
{
    private readonly static FrozenDictionary<byte, (char Upper, char Lower)> ByteToHexDict
        = new Dictionary<byte, (char, char)>()
    {
        { 000, ('0', '0') },
        { 001, ('0', '1') },
        { 002, ('0', '2') },
        { 003, ('0', '3') },
        { 004, ('0', '4') },
        { 005, ('0', '5') },
        { 006, ('0', '6') },
        { 007, ('0', '7') },
        { 008, ('0', '8') },
        { 009, ('0', '9') },
        { 010, ('0', 'a') },
        { 011, ('0', 'b') },
        { 012, ('0', 'c') },
        { 013, ('0', 'd') },
        { 014, ('0', 'e') },
        { 015, ('0', 'f') },
        { 016, ('1', '0') },
        { 017, ('1', '1') },
        { 018, ('1', '2') },
        { 019, ('1', '3') },
        { 020, ('1', '4') },
        { 021, ('1', '5') },
        { 022, ('1', '6') },
        { 023, ('1', '7') },
        { 024, ('1', '8') },
        { 025, ('1', '9') },
        { 026, ('1', 'a') },
        { 027, ('1', 'b') },
        { 028, ('1', 'c') },
        { 029, ('1', 'd') },
        { 030, ('1', 'e') },
        { 031, ('1', 'f') },
        { 032, ('2', '0') },
        { 033, ('2', '1') },
        { 034, ('2', '2') },
        { 035, ('2', '3') },
        { 036, ('2', '4') },
        { 037, ('2', '5') },
        { 038, ('2', '6') },
        { 039, ('2', '7') },
        { 040, ('2', '8') },
        { 041, ('2', '9') },
        { 042, ('2', 'a') },
        { 043, ('2', 'b') },
        { 044, ('2', 'c') },
        { 045, ('2', 'd') },
        { 046, ('2', 'e') },
        { 047, ('2', 'f') },
        { 048, ('3', '0') },
        { 049, ('3', '1') },
        { 050, ('3', '2') },
        { 051, ('3', '3') },
        { 052, ('3', '4') },
        { 053, ('3', '5') },
        { 054, ('3', '6') },
        { 055, ('3', '7') },
        { 056, ('3', '8') },
        { 057, ('3', '9') },
        { 058, ('3', 'a') },
        { 059, ('3', 'b') },
        { 060, ('3', 'c') },
        { 061, ('3', 'd') },
        { 062, ('3', 'e') },
        { 063, ('3', 'f') },
        { 064, ('4', '0') },
        { 065, ('4', '1') },
        { 066, ('4', '2') },
        { 067, ('4', '3') },
        { 068, ('4', '4') },
        { 069, ('4', '5') },
        { 070, ('4', '6') },
        { 071, ('4', '7') },
        { 072, ('4', '8') },
        { 073, ('4', '9') },
        { 074, ('4', 'a') },
        { 075, ('4', 'b') },
        { 076, ('4', 'c') },
        { 077, ('4', 'd') },
        { 078, ('4', 'e') },
        { 079, ('4', 'f') },
        { 080, ('5', '0') },
        { 081, ('5', '1') },
        { 082, ('5', '2') },
        { 083, ('5', '3') },
        { 084, ('5', '4') },
        { 085, ('5', '5') },
        { 086, ('5', '6') },
        { 087, ('5', '7') },
        { 088, ('5', '8') },
        { 089, ('5', '9') },
        { 090, ('5', 'a') },
        { 091, ('5', 'b') },
        { 092, ('5', 'c') },
        { 093, ('5', 'd') },
        { 094, ('5', 'e') },
        { 095, ('5', 'f') },
        { 096, ('6', '0') },
        { 097, ('6', '1') },
        { 098, ('6', '2') },
        { 099, ('6', '3') },
        { 100, ('6', '4') },
        { 101, ('6', '5') },
        { 102, ('6', '6') },
        { 103, ('6', '7') },
        { 104, ('6', '8') },
        { 105, ('6', '9') },
        { 106, ('6', 'a') },
        { 107, ('6', 'b') },
        { 108, ('6', 'c') },
        { 109, ('6', 'd') },
        { 110, ('6', 'e') },
        { 111, ('6', 'f') },
        { 112, ('7', '0') },
        { 113, ('7', '1') },
        { 114, ('7', '2') },
        { 115, ('7', '3') },
        { 116, ('7', '4') },
        { 117, ('7', '5') },
        { 118, ('7', '6') },
        { 119, ('7', '7') },
        { 120, ('7', '8') },
        { 121, ('7', '9') },
        { 122, ('7', 'a') },
        { 123, ('7', 'b') },
        { 124, ('7', 'c') },
        { 125, ('7', 'd') },
        { 126, ('7', 'e') },
        { 127, ('7', 'f') },
        { 128, ('8', '0') },
        { 129, ('8', '1') },
        { 130, ('8', '2') },
        { 131, ('8', '3') },
        { 132, ('8', '4') },
        { 133, ('8', '5') },
        { 134, ('8', '6') },
        { 135, ('8', '7') },
        { 136, ('8', '8') },
        { 137, ('8', '9') },
        { 138, ('8', 'a') },
        { 139, ('8', 'b') },
        { 140, ('8', 'c') },
        { 141, ('8', 'd') },
        { 142, ('8', 'e') },
        { 143, ('8', 'f') },
        { 144, ('9', '0') },
        { 145, ('9', '1') },
        { 146, ('9', '2') },
        { 147, ('9', '3') },
        { 148, ('9', '4') },
        { 149, ('9', '5') },
        { 150, ('9', '6') },
        { 151, ('9', '7') },
        { 152, ('9', '8') },
        { 153, ('9', '9') },
        { 154, ('9', 'a') },
        { 155, ('9', 'b') },
        { 156, ('9', 'c') },
        { 157, ('9', 'd') },
        { 158, ('9', 'e') },
        { 159, ('9', 'f') },
        { 160, ('a', '0') },
        { 161, ('a', '1') },
        { 162, ('a', '2') },
        { 163, ('a', '3') },
        { 164, ('a', '4') },
        { 165, ('a', '5') },
        { 166, ('a', '6') },
        { 167, ('a', '7') },
        { 168, ('a', '8') },
        { 169, ('a', '9') },
        { 170, ('a', 'a') },
        { 171, ('a', 'b') },
        { 172, ('a', 'c') },
        { 173, ('a', 'd') },
        { 174, ('a', 'e') },
        { 175, ('a', 'f') },
        { 176, ('b', '0') },
        { 177, ('b', '1') },
        { 178, ('b', '2') },
        { 179, ('b', '3') },
        { 180, ('b', '4') },
        { 181, ('b', '5') },
        { 182, ('b', '6') },
        { 183, ('b', '7') },
        { 184, ('b', '8') },
        { 185, ('b', '9') },
        { 186, ('b', 'a') },
        { 187, ('b', 'b') },
        { 188, ('b', 'c') },
        { 189, ('b', 'd') },
        { 190, ('b', 'e') },
        { 191, ('b', 'f') },
        { 192, ('c', '0') },
        { 193, ('c', '1') },
        { 194, ('c', '2') },
        { 195, ('c', '3') },
        { 196, ('c', '4') },
        { 197, ('c', '5') },
        { 198, ('c', '6') },
        { 199, ('c', '7') },
        { 200, ('c', '8') },
        { 201, ('c', '9') },
        { 202, ('c', 'a') },
        { 203, ('c', 'b') },
        { 204, ('c', 'c') },
        { 205, ('c', 'd') },
        { 206, ('c', 'e') },
        { 207, ('c', 'f') },
        { 208, ('d', '0') },
        { 209, ('d', '1') },
        { 210, ('d', '2') },
        { 211, ('d', '3') },
        { 212, ('d', '4') },
        { 213, ('d', '5') },
        { 214, ('d', '6') },
        { 215, ('d', '7') },
        { 216, ('d', '8') },
        { 217, ('d', '9') },
        { 218, ('d', 'a') },
        { 219, ('d', 'b') },
        { 220, ('d', 'c') },
        { 221, ('d', 'd') },
        { 222, ('d', 'e') },
        { 223, ('d', 'f') },
        { 224, ('e', '0') },
        { 225, ('e', '1') },
        { 226, ('e', '2') },
        { 227, ('e', '3') },
        { 228, ('e', '4') },
        { 229, ('e', '5') },
        { 230, ('e', '6') },
        { 231, ('e', '7') },
        { 232, ('e', '8') },
        { 233, ('e', '9') },
        { 234, ('e', 'a') },
        { 235, ('e', 'b') },
        { 236, ('e', 'c') },
        { 237, ('e', 'd') },
        { 238, ('e', 'e') },
        { 239, ('e', 'f') },
        { 240, ('f', '0') },
        { 241, ('f', '1') },
        { 242, ('f', '2') },
        { 243, ('f', '3') },
        { 244, ('f', '4') },
        { 245, ('f', '5') },
        { 246, ('f', '6') },
        { 247, ('f', '7') },
        { 248, ('f', '8') },
        { 249, ('f', '9') },
        { 250, ('f', 'a') },
        { 251, ('f', 'b') },
        { 252, ('f', 'c') },
        { 253, ('f', 'd') },
        { 254, ('f', 'e') },
        { 255, ('f', 'f') }
    }.ToFrozenDictionary();

    [ThreadStatic]
    private static StringBuilder? SHA256Builder;

    private readonly static CompositeFormat HexFormat = CompositeFormat.Parse("{0:x2}");

    public static string ToSHA256(this string s)
    {
        byte[]? rented = null;

        var byteLen = Encoding.UTF8.GetByteCount(s);
        Span<byte> bytes = byteLen > 4098 ? (rented = ArrayPool<byte>.Shared.Rent(byteLen)).AsSpan(0, byteLen) : stackalloc byte[byteLen];
        Span<byte> hash = stackalloc byte[SHA256.HashSizeInBytes];
        Encoding.UTF8.GetBytes(s, bytes);

        try
        {
            SHA256.HashData(bytes, hash);
        }
        finally
        {
            if (rented != null)
                ArrayPool<byte>.Shared.Return(rented);
        }

        var builder = SHA256Builder ??= new(SHA256.HashSizeInBytes / 2);
        builder.Clear();
        for (int i = 0; i < hash.Length; i++)
            builder.AppendFormat(null, HexFormat, hash[i]);

        return builder.ToString().Trim();
    }

    public static string ToMd5(this string s)
    {
        int i;
        if (string.IsNullOrWhiteSpace(s)) return string.Empty;

        Span<byte> buffer = stackalloc byte[MD5.HashSizeInBytes];

        char[]? strbuffer_rented = null;
        byte[]? str_rented = null;
        try
        {
            Span<char> strbuffer = s.Length > 512 ? strbuffer_rented = ArrayPool<char>.Shared.Rent(s.Length) : stackalloc char[s.Length];

            for (i = 0; i < strbuffer.Length; i++)
                strbuffer[i] = char.ToLower(strbuffer[i]);

            var utf8len = Encoding.UTF8.GetByteCount(strbuffer);
            Span<byte> str = utf8len > 1024 ? str_rented = ArrayPool<byte>.Shared.Rent(utf8len) : stackalloc byte[utf8len];

            Encoding.UTF8.TryGetBytes(s, str, out _);
            MD5.TryHashData(str, buffer, out _);
        }
        finally
        {
            if (strbuffer_rented is not null)
                ArrayPool<char>.Shared.Return(strbuffer_rented);

            if (str_rented is not null)
                ArrayPool<byte>.Shared.Return(str_rented);
        }

        Span<char> chars = stackalloc char[buffer.Length * 2];

        for (i = 0; i < buffer.Length; i += 2)
        {
            var (u, l) = ByteToHexDict[buffer[i]];
            chars[i] = u;
            chars[i + 1] = l;
        }

        for (i = 0; i < buffer.Length; i++)
            if (chars[i] == '\0') break;

        return new string(chars[..i]);
    }
}
